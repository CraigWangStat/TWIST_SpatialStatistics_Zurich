remDr$navigate()
remDr$navigate(chapter.url)
remDr$screenshot(display = TRUE)
remDr$getPageSource()[[1]]
RSelenium::phantom
RSelenium::phantom()
wdman::phantomjs()
remDr <- remoteDriver(remoteServerAddr = "localhost"
, port = 9515
, browserName = "chrome")
remDr$open()
remDr$navigate(chapter.url)
remDr$screenshot(display = TRUE)
remDr$getPageSource()[[1]]
webElem <- remDr$findElement('class', 'version-ESV')
remDr$screenshot(display = TRUE)
RSelenium:::rsDriver()
RSelenium:::
remDr <- rsDriver()
remDr$navigate(chapter.url)
chapter.url <- "https://www.betbrain.com/search-all/bayern/"
remDr$navigate(chapter.url)
remDr <- remDr$client
remDr$navigate(chapter.url)
remDr$screenshot(display = TRUE)
remDr$getPageSource()[[1]]
remDr$screenshot(display = TRUE)
code <- remDr$getPageSource()[[1]]
# webscrape
library(rvest)
code <- read_html(remDr$getPageSource()[[1]])
remDr <- rsDriver()
remDr <- remDr$client
remDr$navigate(chapter.url)
code <- read_html(remDr$getPageSource()[[1]])
code  %>% html_node("TooltipMatchTitle")
code %>% html_node("span.TooltipMatchTitle")
temp <- code %>% html_node("span.TooltipMatchTitle")
print(temp)
temp <- code %>% html_node("span.TooltipMatchTitle") %>% html_text()
temp
remDr$findElement(using = 'css selector', ".SearchTooltipMatch")
remDr <- rsDriver()
remDr <- remDr$client
remDr$navigate(chapter.url)
remDr$findElement(using = 'css selector', ".SearchTooltipMatch")
element <- remDr$findElement(using = 'css selector', ".SearchTooltipMatch")
element$clickElement()
code <- read_html(remDr$getPageSource()[[1]])
temp <- code %>% html_node("OTCol IsAverage") %>% html_text()
temp <- code %>% html_node("li.OTCol IsAverage") %>% html_text()
temp <- code %>% html_node("li") %>% html_text()
temp <- code %>% html_node("li.OTCol IsAverage") %>% html_text()
temp <- code %>% html_node("ul.OTRow") %>% html_text()
temp <- code %>% html_node("ul.OTRow")
temp
temp <- code %>% html_node("li.OTCol.HighestOdds") %>% html_text()
temp <- code %>% html_node("li.OTCol.HighestOdds")
temp
temp <- code %>% html_nodes("li.OTCol.HighestOdds")
temp <- code %>% html_nodes("li.OTCol.HighestOdds") %>% html_text()
average <- code %>% html_nodes("li.OTCol.IsAverage") %>% html_text()
max <- code %>% html_nodes("li.OTCol.HighestOdds") %>% html_text()
average <- code %>% html_nodes("li.OTCol.IsAverage") %>% html_text() %>% .[1:3]
average <- as.numeric(code %>% html_nodes("li.OTCol.IsAverage") %>% html_text() %>% .[1:3])
max <- as.numeric(code %>% html_nodes("li.OTCol.HighestOdds") %>% html_text())
element <- remDr$findElement(using = 'css selector', ".PopularBetTypesItem")
element$clickElement()
element <- remDr$findElement(using = 'css selector', ".PopularBetTypesItem >  option:nth-child(3)")
element <- remDr$findElement(using = 'css selector', ".PopularBetTypesItem >option:nth-child(3)")
element <- remDr$findElement(using = 'css selector', ".PopularBetTypesItem = option:nth-child(2)")
element <- remDr$findElement(using = 'css selector', ".PopularBetTypesItem == option:nth-child(2)")
element <- remDr$findElement(using = 'css selector', ".PopularBetTypesItem:nth-child(2)")
element$clickElement()
element <- remDr$findElement(using = 'css selector', ".PopularBetTypesItem:nth-child(3)")
element$clickElement()
element <- remDr$findElement(using = 'css selector', ".MainWrapper:nth-child(3)")
element <- remDr$findElement(using = 'css selector', ".MainWrapper:nth-child(1)")
element <- remDr$findElement(using = 'css selector', ".MainWrapper")
element$clickElement()
library(variosig)
?`variosig-package`
1/0.35
library(eggCounts)
?fecr_stan
install.packages("hexSticker")
library(hexSticker)
sticker(expression(plot(cars, cex=.5, cex.axis=.5, mgp=c(0,.3,0), xlab="", ylab="")),
package="hexSticker", p_size=8, s_x=1, s_y=.8, s_width=1.2, s_height=1,
filename="inst/figures/baseplot.png")
sticker(expression(plot(cars, cex=.5, cex.axis=.5, mgp=c(0,.3,0), xlab="", ylab="")),
package="spatialFusion", p_size=8, s_x=1, s_y=.8, s_width=1.2, s_height=1)
cars
?sticker
getwd()
sticker(expression(plot(cars, cex=.5, cex.axis=.5, mgp=c(0,.3,0), xlab="", ylab="")),
package="spatialFusion", p_size=8, s_x=1, s_y=.8, s_width=1.2, s_height=1,
filename="./Desktop/baseplot.png")
sticker(expression(plot(cars, cex=.5, cex.axis=.5, mgp=c(0,.3,0), xlab="", ylab="")),
package="spatialFusion", p_size=11, s_x=1, s_y=.8, s_width=1.2, s_height=1,
filename="./Desktop/baseplot.png")
sticker(expression(plot(cars, cex=.5, cex.axis=.5, mgp=c(0,.3,0), xlab="", ylab="")),
package="spatialFusion", p_size=11, s_x=1, s_y=.8, s_width=1.2, s_height=1,
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=11, s_x=1, s_y=.8, s_width=1.2, s_height=1,
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=11, s_x=1, s_y=.8, s_width=0.5, s_height=0.5,
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=11, s_x=1, s_y=.8, s_width=0.5, s_height=0.5, spotlight = T,
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=11, s_x=1, s_y=.8, s_width=1, s_height=0.5, spotlight = T,
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=11, s_x=1, s_y=.8, s_width=0.5, s_height=0.5, spotlight = T,
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=11, s_x=1, s_y=.8, s_width=0.5, s_height=0.5, h_fill= "lightblue",
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=11, s_x=1, s_y=.8, s_width=0.5, s_height=0.5, h_fill= "blue",
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=11, s_x=1, s_y=.8, s_width=0.5, s_height=0.5, h_fill= "lightblue",
p_color = "black",
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=11, s_x=1, s_y=.8, s_width=0.65, s_height=0.45, h_fill= "lightblue",
p_color = "black",
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=11, s_x=1, s_y=.8, s_width=0.5, s_height=0.4, h_fill= "lightblue",
p_color = "black",
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=11, s_x=1, s_y=.8, s_width=0.5, s_height=0.3, h_fill= "lightblue",
p_color = "black",
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=8, s_x=1, s_y=.8, s_width=0.5, s_height=0.3, h_fill= "lightblue",
p_color = "black",
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=11, s_x=1, s_y=.8, s_width=0.5, s_height=0.5, h_fill= "lightblue",
p_color = "black",
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=13, s_x=1, s_y=.8, s_width=0.5, s_height=0.5, h_fill= "lightblue",
p_color = "black",
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=13, s_x=1, s_y=.8, s_width=0.5, s_height=0.4, h_fill= "lightblue",
p_color = "black",
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=13, s_x=1, s_y=.8, s_width=0.5, s_height=0.4, h_fill= "lightblue",
p_color = "black", p_x = 1, p_y = 0.5,
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=13, s_x=1, s_y=.8, s_width=0.5, s_height=0.4, h_fill= "lightblue",
p_color = "black", p_x = 1, p_y = 0,
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=13, s_x=1, s_y=.8, s_width=0.5, s_height=0.4, h_fill= "lightblue",
p_color = "black", p_x = 1, p_y = 2,
filename="baseplot.png")
sticker("C:/Users/craigwang/Dropbox/7.png",
package="spatialFusion", p_size=13, s_x=1, s_y=.8, s_width=0.5, s_height=0.4, h_fill= "lightblue",
p_color = "black", p_x = 1, p_y = 1.5,
filename="baseplot.png")
load("C:/Users/craigwang/Dropbox/gg.RData")
g1
load("C:/Users/craigwang/Dropbox/gg.RData")
library(ggplot2)
g1 <- ggplot() +
geom_polygon(data = polys.df, aes(x = long, y = lat, group = group, fill = SMR), alpha = 0.4) +
geom_path(data = polys.df, aes(x = long, y = lat, group = group)) +
geom_point(data = dat$mrf[dat$sample.ind,], aes(x = x, y = y, color = Exposure), size = 1.5) +
geom_point(data = pp, aes(x = x, y = y, shape = ""), color = "red") + coord_equal() +
xlim(c(0, 20)) +  scale_fill_gradientn(colours = rev(heat.colors(10))) + scale_shape_manual(values = 2,name = "Case");g1
g1 <- ggplot() +
geom_polygon(data = polys.df, aes(x = long, y = lat, group = group, fill = SMR), alpha = 0.4) +
geom_path(data = polys.df, aes(x = long, y = lat, group = group)) +
geom_point(data = dat$mrf[dat$sample.ind,], aes(x = x, y = y, color = Exposure), size = 1.5) +
geom_point(data = pp, aes(x = x, y = y, shape = ""), color = "red") + coord_equal() +
xlim(c(0, 19.5)) +  scale_fill_gradientn(colours = rev(heat.colors(10))) + scale_shape_manual(values = 2,name = "Case");g1
g1 <- ggplot() +
geom_polygon(data = polys.df, aes(x = long, y = lat, group = group, fill = SMR), alpha = 0.4) +
geom_path(data = polys.df, aes(x = long, y = lat, group = group)) +
geom_point(data = dat$mrf[dat$sample.ind,], aes(x = x, y = y, color = Exposure), size = 1.5) +
geom_point(data = pp, aes(x = x, y = y, shape = ""), color = "red") + coord_equal() +
xlim(c(0, 19.8)) +  scale_fill_gradientn(colours = rev(heat.colors(10))) + scale_shape_manual(values = 2,name = "Case");g1
g1 <- ggplot() +
geom_polygon(data = polys.df, aes(x = long, y = lat, group = group, fill = SMR), alpha = 0.4) +
geom_path(data = polys.df, aes(x = long, y = lat, group = group)) +
geom_point(data = dat$mrf[dat$sample.ind,], aes(x = x, y = y, color = Exposure), size = 1.5) +
geom_point(data = pp, aes(x = x, y = y, shape = ""), color = "red") + coord_equal() +
xlim(c(0, 19.7)) +  scale_fill_gradientn(colours = rev(heat.colors(10))) + scale_shape_manual(values = 2,name = "Case");g1
ggplot(data = dat$mrf, aes(x = x, y = y, color = Exposure)) +
geom_point(size = 3.5) + labs(x="long",y="lat")
sticker("C:/Users/craigwang/Dropbox/Capture.png",
package="spatialFusion", p_size=13, s_x=1, s_y=.85, s_width=0.45, s_height=0.45, h_fill= "lightblue",
p_color = "black", p_x = 1, p_y = 1.5,
filename="baseplot.png")
library(hexSticker)
sticker("C:/Users/craigwang/Dropbox/Capture.png",
package="spatialFusion", p_size=13, s_x=1, s_y=.85, s_width=0.45, s_height=0.45, h_fill= "lightblue",
p_color = "black", p_x = 1, p_y = 1.5,
filename="baseplot.png")
getWd()
getwd()
shiny::runApp('P:/Projects/TWIST')
runApp('P:/GoogleDrive/TWIST_Spatial_stat/shiny')
# server ------------------------------------------------------------------
load("data.RData")
setwd("P:/GoogleDrive/TWIST_Spatial_stat/shiny")
# server ------------------------------------------------------------------
load("data.RData")
runApp()
install.packages("osmdata")
install.packages("sf")
shiny::runApp()
library(sf)
install.packages("sf")
shiny::runApp()
# server ------------------------------------------------------------------
load("data.RData")
runApp()
add_osm_feature(opq = opq(bbox = c(8.35768, 47.15944,8.984941,47.694472)), key = 'amenity', value = "bars")
q0 <- opq(bbox = c(8.35768, 47.15944,8.984941,47.694472))
# extract Bars & Pubs
q6 <- add_osm_feature(opq = q0, key = 'amenity', value = "bar")
bars <- osmdata_sf(q6)
bars_zh<- st_geometry(bars$osm_points)
tmap::qtm(bars_zh)
?st_geometry
runApp()
# options(encoding = "UTF-8")
# map0 <- spTransform(readOGR("./data/GEN_A4_GEMEINDEN_SEEN_2018_F.shp", encoding = "UTF-8", verbose=TRUE),
#                     CRS("+proj=longlat"))
# pop <- read.csv("population_raster_ha.csv")
# emp <- read.csv("empl_raster_ha.csv", sep = ";")
# save.image("data.RData")
bars <- qtm(st_geometry(osmdata_sf(add_osm_feature(opq = opq(bbox = c(8.35768, 47.15944,8.984941,47.694472)), key = 'amenity', value = "bar"))$osm_points))
runApp()
tm_shape(pop_layers) +
tm_raster(input$var_pop, palette = "Spectral", title = "Inhabitants per 100m2", n = 10)
tmap_leaflet(tm) + qtm(bars)
tm_shape(pop_layers) +
tm_raster(input$var_pop, palette = "Spectral", title = "Inhabitants per 100m2", n = 10)
tmap_leaflet(tm) + qtm(bars)
tm <- tm_shape(pop_layers) +
tm_raster(input$var_pop, palette = "Spectral", title = "Inhabitants per 100m2", n = 10)
tm <- tm_shape(pop_layers) +
tm_raster("TOT", palette = "Spectral", title = "Inhabitants per 100m2", n = 10)
tmap_leaflet(tm) + qtm(bars)
runApp()
setwd("P:/Projects/TWIST_SpatialStatistics_Zurich/shiny")
# options(encoding = "UTF-8")
# map0 <- spTransform(readOGR("./data/GEN_A4_GEMEINDEN_SEEN_2018_F.shp", encoding = "UTF-8", verbose=TRUE),
#                     CRS("+proj=longlat"))
# pop <- read.csv("population_raster_ha.csv")
# emp <- read.csv("empl_raster_ha.csv", sep = ";")
# save.image("data.RData")
# server ------------------------------------------------------------------
load("data.RData")
colnames(emp)
runApp()
str(pop_layers2@data)
str(pop_layers2@data@values)
runApp()
load("Criteria_per_Cell.RData")
setwd("P:/Projects/TWIST_SpatialStatistics_Zurich/shiny")
load("data/Criteria_per_Cell.RData")
load("Criteria_per_Cell.RData")
load("../Criteria_per_Cell.RData")
View(output)
runApp()
# options(encoding = "UTF-8")
# map0 <- spTransform(readOGR("./data/GEN_A4_GEMEINDEN_SEEN_2018_F.shp", encoding = "UTF-8", verbose=TRUE),
#                     CRS("+proj=longlat"))
# pop <- read.csv("population_raster_ha.csv")
# emp <- read.csv("empl_raster_ha.csv", sep = ";")
# save.image("data.RData")
# server ------------------------------------------------------------------
load("data/Criteria_per_Cell.RData")
runApp()
setwd("P:/Projects/TWIST_SpatialStatistics_Zurich/shiny")
# server ------------------------------------------------------------------
load("/data/data.RData")
load("/data/Criteria_per_Cell.RData")
# server ------------------------------------------------------------------
load("./data/data.RData")
runApp()
load("./data/Criteria_per_Cell.RData")
# create spatial points data frame
coordinates(output) <- ~ ha_x + ha_y
# coerce to SpatialPixelsDataFrame
gridded(output) <- TRUE
# plot(pop)
# Generate RasterBrick object containing all the layers
pop_layers <- brick(output)
#define crs & projection, set to swiss projection
crs(pop_layers) <- "+init=epsg:2056"
#transform to WGS84
pop_layers2 <- projectRaster(pop_layers, crs="+init=epsg:4326 +proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=2600000 +y_0=1200000 +ellps=bessel +units=m +no_defs")
save.image("data.RData")
runApp()
colnames(output)
colnames(output@data)
runApp()
exists(gj)
exists("gg")
runApp()
?req
runApp()
?href
?img
runApp()
colnames
colnames(output@data)
runApp()
?st_geometry
?qtm
runApp()
str(pop_layers2@data@values)
load("./data/data.RData")
load("./data/Criteria_per_Cell.RData")
load("./data/data.RData")
# create spatial points data frame
coordinates(output) <- ~ ha_x + ha_y
load("./data/data.RData")
load("./data/Criteria_per_Cell.RData")
# create spatial points data frame
output$score <- NA
colnames(output)
coordinates(output) <- ~ ha_x + ha_y
# coerce to SpatialPixelsDataFrame
gridded(output) <- TRUE
# plot(pop)
# Generate RasterBrick object containing all the layers
pop_layers <- brick(output)
#define crs & projection, set to swiss projection
crs(pop_layers) <- "+init=epsg:2056"
#transform to WGS84
pop_layers2 <- projectRaster(pop_layers, crs="+init=epsg:4326 +proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=2600000 +y_0=1200000 +ellps=bessel +units=m +no_defs")
save.image("data.RData")
str( pop_layers2@data@values)
load("./data/Criteria_per_Cell.RData")
colnames( pop_layers2@data@values)
colnames(output)
?cut
detach("package:raster", unload=TRUE)
base::cut(input$var_age, breaks = c(-Inf, 6, 15, 19, 24, 44, 64, 79, Inf))
base::cut(24, breaks = c(-Inf, 6, 15, 19, 24, 44, 64, 79, Inf))
which(base::cut(24, breaks = c(-Inf, 6, 15, 19, 24, 44, 64, 79, Inf)))
table(base::cut(24, breaks = c(-Inf, 6, 15, 19, 24, 44, 64, 79, Inf)))
runApp()
str(pop_layers2@data@values)
runApp()
user
calc_score(pop_layers2@data@values[,1:27], as.matrix(user))
runApp()
calc_score(pop_layers2@data@values[,1:25], as.matrix(user))
str(calc_score(pop_layers2@data@values[,1:25], as.matrix(user)))
as.matrix(user)
calc_score(pop_layers2@data@values[,1:25], as.vector(user))
runApp()
calc_score(pop_layers2@data@values[,1:25], as.vector(user))
hist(calc_score(pop_layers2@data@values[,1:25], as.vector(user)))
runApp()
as.vector(user)
user
calc_score(pop_layers2@data@values[,1:25], as.vector(user))
pop_layers2@data@values[,26]
head(pop_layers2@data@values[,1:25])
str(pop_layers2@data@values)
View(output)
# create spatial points data frame
output$score <- NA
coordinates(output) <- ~ ha_x + ha_y
# coerce to SpatialPixelsDataFrame
gridded(output) <- TRUE
# plot(pop)
# Generate RasterBrick object containing all the layers
pop_layers <- brick(output)
#define crs & projection, set to swiss projection
crs(pop_layers) <- "+init=epsg:2056"
#transform to WGS84
pop_layers2 <- projectRaster(pop_layers, crs="+init=epsg:4326 +proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=2600000 +y_0=1200000 +ellps=bessel +units=m +no_defs")
runApp()
# server ------------------------------------------------------------------
load("./data/data.RData")
runApp()
calc_score(output, as.vector(user))
# server ------------------------------------------------------------------
load("./data/Criteria_per_Cell.RData")
runApp()
calc_score(output, as.vector(user))
runApp()
calc_score(output, as.vector(user))
str(output)
# server ------------------------------------------------------------------
load("./data/Criteria_per_Cell.RData")
output[,1:2]
output[,-(1:2)]
colnames(output)[15:25]
calc_score()
calc_score
runApp()
# server ------------------------------------------------------------------
load("./data/Criteria_per_Cell.RData")
runApp()
shiny::runApp()
# server ------------------------------------------------------------------
load("./data/Criteria_per_Cell.RData")
runApp()
calc_score(output[, 3:27], as.vector(user))
class(output)
# server ------------------------------------------------------------------
load("./data/Criteria_per_Cell.RData")
dat <- output
rm(output)
save.image("./data/Criteria_per_Cell.RData")
runApp()
calc_score(dat[,3:27], as.vector(user))
dat$score <- calc_score(dat[,3:27], as.vector(user))
coordinates(dat) <- ~ ha_x + ha_y
# coerce to SpatialPixelsDataFrame
gridded(dat) <- TRUE
# plot(pop)
# Generate RasterBrick object containing all the layers
pop_layers <- brick(dat)
#define crs & projection, set to swiss projection
crs(pop_layers) <- "+init=epsg:2056"
#transform to WGS84
pop_layers2 <- projectRaster(pop_layers, crs="+init=epsg:4326 +proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=2600000 +y_0=1200000 +ellps=bessel +units=m +no_defs")
tm <- tm_shape(pop_layers2) +
tm_raster(score, palette = "Spectral", title = "Inhabitants per 100m2", n = 10)
runApp()
table(base::cut(NULL, breaks = c(-Inf, 6, 15, 19, 24, 44, 64, 79, Inf)))
?XML
detach("package:raster", unload=TRUE)
remove.packages("XML", lib="~/R/win-library/3.5")
install.packages("XML")
shiny::runApp()
runApp()
?cdf
?ecdf
?percentile
ecdf(c(1,24,5,7,4))
temp <-ecdf(c(1,24,5,7,4))
print(temp)
quantile((temp))
temp
library( Hmisc)
library(Hmisc)
Ecdf(c(2,3,5,6,2,4,5,1:100))
temp <- Ecdf(c(2,3,5,6,2,4,5,1:100))
runApp()
?Ecdf
Ecdf(c(2,3,5,6,2,4,5,1:100))
Ecdf(c(2,3,5,6,2,4,5,1:100))$y
install.packages("fsmb")
install.packages("fmsb")
library(fmsb)
percentile(c(2,3,5,6,2,4,5,1:100))
length(percentile(c(2,3,5,6,2,4,5,1:100)))
runApp()
?tm_raster
seq(0,100,by = 10)
runApp()
load("./data/Criteria_per_Cell.RData")
colnames(dat)
High Tech Industry","Knowledge intensive services","Trade and Commerce","Finance","Self-employed services","Industry","Socaial and Healthcare","Construction","Other Services","Information technology","Education","Traffic  and Logistics","Others"
colnames(dat)[15:27]
colnames(dat)[15:27] <- c("High Tech Industry","Knowledge intensive services","Trade and Commerce","Finance","Self-employed services","Industry","Socaial and Healthcare","Construction","Other Services","Information technology","Education","Traffic and Logistics","Others")
save.image("Criteria_per_Cell.RData")
runApp()
load("./data/Criteria_per_Cell.RData")
colnames(dat)[15:27] <- c("High Tech Industry","Knowledge intensive services","Trade and Commerce","Finance","Self-employed services","Industry","Socaial and Healthcare","Construction","Other Services","Information technology","Education","Traffic and Logistics","Others")
save.image("Criteria_per_Cell.RData")
load("./data/Criteria_per_Cell.RData")
runApp()
?qtm
runApp()
?checkboxInput
runApp()
c(table(base::cut(input$var_age, breaks = c(-Inf, 6, 15, 19, 24, 44, 64, 79, Inf))), # age
if(input$var_gen == "Male"){c(1,0)}else if(input$var_gen == "Female"){c(0,1)}else{c(0,0)}, # gender
if(input$var_nat == "Swiss"){c(1,0)}else if(input$var_nat == "Foreign"){c(0,1)}else{c(0,0)}, # nat
sapply(c("ht_per","widl_per","handel_per","finanz_per","freiedl_per",
"gewerbe_per","gesundheit_per","bau_per","sonstdl_per","inform_per",
"unterricht_per","verkehr_per","uebrige_per"), function(x) x == input$var_work)) # work
c(table(base::cut(input$var_age, breaks = c(-Inf, 6, 15, 19, 24, 44, 64, 79, Inf))), # age
if(input$var_gen == "Male"){c(1,0)}else if(input$var_gen == "Female"){c(0,1)}else{c(0,0)}, # gender
if(input$var_nat == "Swiss"){c(1,0)}else if(input$var_nat == "Foreign"){c(0,1)}else{c(0,0)}, # nat
sapply(c("ht_per","widl_per","handel_per","finanz_per","freiedl_per",
"gewerbe_per","gesundheit_per","bau_per","sonstdl_per","inform_per",
"unterricht_per","verkehr_per","uebrige_per"), function(x) x == input$var_work)) # work
user
c(table(base::cut(input$var_age, breaks = c(-Inf, 6, 15, 19, 24, 44, 64, 79, Inf))), # age
if(input$var_gen == "Male"){c(1,0)}else if(input$var_gen == "Female"){c(0,1)}else{c(0,0)}, # gender
if(input$var_nat == "Swiss"){c(1,0)}else if(input$var_nat == "Foreign"){c(0,1)}else{c(0,0)}, # nat
sapply(c("ht_per","widl_per","handel_per","finanz_per","freiedl_per",
"gewerbe_per","gesundheit_per","bau_per","sonstdl_per","inform_per",
"unterricht_per","verkehr_per","uebrige_per"), function(x) x == input$var_work))
?tm_raster
runApp()
